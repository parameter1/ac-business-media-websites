import hierarchyAliases from "@parameter1/base-cms-marko-web/utils/hierarchy-aliases";
import defaultValue from "@parameter1/base-cms-marko-core/utils/default-value";
import { getAsObject, getAsArray, get } from "@parameter1/base-cms-object-path";
import queryFragment from "../../graphql/fragments/content-list";
import getContentPreview from "../../utils/get-content-preview";
import buildContentStructuredData from "../../utils/build-content-structured-data";
import contentStructuredDataQueryFragment from "../../graphql/fragments/content-structured-data"

$ const { site, GAM, req, userState } = out.global;
$ const showCompanySectionFilter = site.get("showCompanySectionFilters") || false;
$ const { id, type, pageNode } = data;

$ const adSlots = ({ aliases }) => ({
  "gpt-ad-lb1":   GAM.getAdUnit({ name: "lb1", aliases }),
  "gpt-ad-lb2":   GAM.getAdUnit({ name: "lb1", aliases }),
  "gpt-ad-rail1": GAM.getAdUnit({ name: "rail1", aliases }),
  "gpt-ad-rail2": GAM.getAdUnit({ name: "rail2", aliases }),
  "gpt-ad-rail-infinite": GAM.getAdUnit({ name: "infinite-rail", aliases }),
});
$ const displayPrimaryImage = ["whitepaper", "video"].includes(type) ? false : true;
$ const displayPublishedDate = ["event", "webinar", "company", "contact"].includes(type) ? false : true;
$ const displayRecommended = ["company", "product", "contact"].includes(type) ? false : true;
$ const displayInquiry = (content) => {
  if (site.get("inquiry.enabled") === false) return false;
  if (type === "company" && get(content, "enableRmi")) return true;
  if (type === "product" && get(content, "company.enableRmi")) return true;
  return false;
}
$ const displayCompanyImage = ["product", "press-release"].includes(type) ? true : false;
$ const displaySocialShare = ["contact"].includes(type) ? false : true;
$ const displayPhotoswipe = ["contact"].includes(type) ? false : true;
$ const isShortForm = ["contact"].includes(type) ? true : false;
$ const injectAds = ["article", "news", "press-release", "blog"].includes(type) ? true : false;

<!-- @todo change recommended to be more from company on product pages -->
<marko-web-content-page-layout
  id=id
  type=type
  build-structured-data=buildContentStructuredData
  structured-data-query-fragment=contentStructuredDataQueryFragment
>
  <@head>
    <marko-web-gtm-content-context|{ context }| id=id>
      $ const ctx = { ...context, userState };
      <marko-web-gtm-push data=ctx />
    </marko-web-gtm-content-context>
    <marko-web-gam-targeting key-values={ cont_id: id, cont_type: type } />
    <marko-web-resolve-page|{ data: content }| node=pageNode>
      <refresh-theme-parsely-content content=content />
      $ const aliases = hierarchyAliases(content.primarySection);
      <marko-web-gam-slots slots=adSlots({ aliases }) />
    </marko-web-resolve-page>
  </@head>
  <@above-container>
    <marko-web-resolve-page|{ data: content }| node=pageNode>
      $ const aliases = hierarchyAliases(content.primarySection);
      <marko-web-gam-out-of-page-ad ...GAM.getAdUnit({ name: "reskin", aliases }) />
      <marko-web-p1-events-track-content node=content />
    </marko-web-resolve-page>
  </@above-container>
  <@page>
    <marko-web-resolve-page|{ data: content, resolved }| node=pageNode>
      $ const section = resolved.getAsObject("primarySection");
      $ const aliases = hierarchyAliases(section);
      <marko-web-page-wrapper modifiers=["no-bottom-padding"]>
        <@section>
          <div class="row">
            <div class="col">
              <marko-web-gam-display-ad
                id="gpt-ad-lb1"
                slots=adSlots({ aliases })
                modifiers=["max-width-970", "center"]
              />
            </div>
          </div>
        </@section>
        <if(showCompanySectionFilter)>
          <@section>
            <div class="row company-section-search">
              <div class="col-md-6">
                <common-company-search-block />
              </div>
              <div class="col-md-6">
                <common-section-search-block />
              </div>
            </div>
          </@section>
        </if>
        <@section>
          <div class="row">
            <div class="col">
              <default-theme-website-section-breadcrumbs section=section />
              <marko-web-content-name tag="h1" class="page-wrapper__title" obj=content />
              <marko-web-content-teaser tag="p" class="page-wrapper__deck" obj=content />

              <div class="page-attribution-wrapper">
                <default-theme-page-dates|{ blockName }|>
                  <if(content.type === "event")>
                    <marko-web-content-start-date block-name=blockName obj=content />
                    <marko-web-content-end-date block-name=blockName obj=content />
                  </if>
                  <if(content.type === "webinar")>
                    <marko-web-content-start-date block-name=blockName obj=content />
                  </if>
                  <if(displayPublishedDate)>
                    <marko-web-content-published block-name=blockName obj=content />
                  </if>
                </default-theme-page-dates>
                <default-theme-content-attribution obj=content />
              </div>

              <refresh-theme-content-section-logo>
                <@section name=section.name hierarchy=section.hierarchy />
              </refresh-theme-content-section-logo>

              <!-- <if(displaySocialShare)>
                <marko-web-social-sharing
                  path=content.siteContext.path
                  providers=["email", "facebook", "linkedin", "twitter"]
                  title=content.name
                  description=content.teaser
                  media=get(content, "primaryImage.src")
                />
              </if> -->
            </div>
          </div>
        </@section>

        <@section>
          <div class="row">
            <default-theme-page-contents|{ blockName }|
              class="col-lg-8 mb-3 mb-lg-0"
              attrs={ "data-gallery-id": id }
            >
              <if(content.embedCode)>
                <marko-web-content-embed-code block-name=blockName obj=content />
              </if>
              <else-if(content.type === "whitepaper" || content.type === "document")>
                <marko-web-page-image
                  obj=content.primaryImage
                  modifiers=["primary-image-inline"]
                  fluid=false
                  width=250
                />
              </else-if>
              <else-if(displayPrimaryImage)>
                $ const isLogo = get(content, "primaryImage.isLogo");
                <if(isLogo || type === "contact")>
                  <marko-web-page-image
                    obj=content.primaryImage
                    modifiers=(type === "contact" ? [] : ["primary-image-inline"])
                    fluid=false
                    width=250
                  />
                </if>
                <else>
                  <marko-web-page-image
                    obj=content.primaryImage
                    modifiers=["fluid-16by9"]
                    options={ w: 512, h: 288, fit: "crop" }
                  />
                </else>
              </else-if>
              $ const companyImage = getAsObject(content, "company.primaryImage");
              <if(displayCompanyImage && companyImage.src)>
                <marko-web-link href=get(content, "company.siteContext.path")>
                  <marko-web-page-image
                    obj=companyImage
                    modifiers=["primary-image-inline"]
                    fluid=false
                    width=250
                  />
                </marko-web-link>
              </if>
              <default-theme-content-contact-details obj=content />
              $ const requiresRegistration = get(content, "userRegistration.isCurrentlyRequired") || site.get('forceContentGate');
              $ const accessLevels = getAsArray(content, "userRegistration.accessLevels");
              <marko-web-identity-x-access|context|
                enabled=requiresRegistration
                required-access-level-ids=accessLevels
              >
                <if(!context.canAccess || context.requiresUserInput)>
                  $ const body = getContentPreview({ body: content.body, selector: "p:nth-of-type(1)" });
                  <marko-web-content-body block-name=blockName obj={ body } />

                  <div class="content-page-preview-overlay" />
                  <refresh-theme-content-page-gate
                    can-access=context.canAccess
                    is-logged-in=context.isLoggedIn
                    has-required-access-level=context.hasRequiredAccessLevel
                    requires-access-level=context.requiresAccessLevel
                    requires-user-input=context.requiresUserInput
                    messages=context.messages
                  />
                </if>
                <else>
                  $ const bodyId = `content-body-${id}`;
                  <marko-web-content-body block-name=blockName obj=content attrs={ id: bodyId } />
                  <if(injectAds)>
                    $ const atCount = 1750;
                    <marko-web-gam-inject-ads selector=`#${bodyId}`>
                      <@inject
                        at=atCount
                        modifiers=["max-width-300", "in-content"]
                        ...GAM.getAdUnit({ name: "in-content", aliases })
                      />
                      <@inject
                        at=(atCount * 2)
                        modifiers=["max-width-300", "in-content"]
                        ...GAM.getAdUnit({ name: "in-content", aliases })
                      />
                      <@inject
                        at=(atCount * 3)
                        modifiers=["max-width-300", "in-content"]
                        ...GAM.getAdUnit({ name: "in-content", aliases })
                      />
                      <@inject
                        at=(atCount * 4)
                        modifiers=["max-width-300", "in-content"]
                        ...GAM.getAdUnit({ name: "in-content", aliases })
                      />
                    </marko-web-gam-inject-ads>
                  </if>

                  <marko-web-content-sidebars block-name=blockName obj=content />
                  <if(type === "document" || type === "whitepaper")>
                    <default-theme-content-download obj=content>
                      <@wufoo user-name=site.get("wufoo.userName") />
                      <@link class="btn btn-lg btn-primary" />
                    </default-theme-content-download>
                  </if>
                </else>
              </marko-web-identity-x-access>
              <if(["article", "blog", "media-gallery", "news", "podcast", "press-release", "product", "video", "webinar"].includes(content.type))>
                <refresh-theme-featured-companies content=content />
              </if>
              <if(displaySocialShare)>
                <marko-web-social-sharing
                  path=content.siteContext.path
                  providers=["email", "facebook", "linkedin", "twitter"]
                />
              </if>
              <if(type === "webinar")>
                $ const isUpcoming = content.startDate > Date.now();
                <default-theme-content-link-url
                  obj=content
                  label=(isUpcoming ? "Register for Webinar" : "View Webinar")
                  target="_blank"
                />
              </if>
              <if(displayInquiry(content))>
                <marko-web-inquiry-form content=content />
              </if>

              <refresh-theme-related-content-block
                content-id=id
              />

              <div
                id="omeda-content-newsletter-block"
                class="omeda-personalization"
              />

              <div id="credspark-container" />

            </default-theme-page-contents>
            <aside class="col-lg-4 page-rail">
              <marko-web-gam-display-ad
                id="gpt-ad-rail1"
                modifiers=["max-width-300", "margin-auto-x-md"]
                slots=adSlots({ aliases })
              />

              <refresh-theme-latest-in-section-block
                content-id=id
                section-id=section.id
                section-name=section.name
              >
                <@native-x
                  indexes=defaultValue(site.get("nativeX.content.latestIn.indexes"), [0])
                  name="default"
                  aliases=aliases
                />
              </refresh-theme-latest-in-section-block>

              <leaders-contextual content-id=id />

              <if(!isShortForm)>
                <marko-web-gam-display-ad
                  id="gpt-ad-rail2"
                  modifiers=["sticky-top", "max-width-300", "margin-auto-x-md"]
                  slots=adSlots({ aliases })
                />
              </if>
            </aside>
            <if(displayPhotoswipe)>
              <marko-web-photoswipe-images images=resolved.getEdgeNodesFor("images")>
                <@props thumbnail-click-selectors=`[data-gallery-id="${id}"] [data-image-id]` />
              </marko-web-photoswipe-images>
            </if>
          </div>
        </@section>

        <if(displayRecommended)>
          <@section modifiers=["card-deck"]>
            <refresh-theme-recommended-block>
              <@native-x indexes=[2] name="default" aliases=aliases />
            </refresh-theme-recommended-block>
          </@section>
        </if>
      </marko-web-page-wrapper>
    </marko-web-resolve-page>
  </@page>
  <@below-page>
    <marko-web-page-container for="content" tag="div" id=id type=type modifiers=["below"]>
      <!-- Refresh sticky, right-rail infinite scroll ad -->
      <marko-web-gam-refresh-ad on="load-more-in-view" slot-id="gpt-ad-rail-infinite" />

      <marko-web-resolve-page|{ data: content, resolved }| node=pageNode>
        $ const section = resolved.getAsObject("primarySection");
        $ const aliases = hierarchyAliases(section);
        <marko-web-page-wrapper>
          <@section>
            <div class="row">
              <div class="col">
                <marko-web-gam-display-ad
                  id="gpt-ad-lb2"
                  slots=adSlots({ aliases })
                  modifiers=["max-width-970", "center"]
                />
              </div>
            </div>
          </@section>

          <@section>
            <div class="row">
              <div class="col-lg-8 infinite-scroll-target">
                <refresh-theme-content-infinite-scroll-block
                  id=id
                  type=type
                  name=content.name
                  section-id=section.id
                  aliases=aliases
                  limit=12
                  skip=(["company", "contact"].includes(type) ? 0 : 4)
                >
                  <@native-x
                    indexes=defaultValue(site.get("nativeX.content.latest.initial.indexes"), [])
                    name="default"
                    aliases=aliases
                  />
                  <@native-x-load-more
                    indexes=defaultValue(site.get("nativeX.content.latest.loadMore.indexes"), [0])
                    name="default"
                    aliases=aliases
                  />
                </refresh-theme-content-infinite-scroll-block>
              </div>
              <aside class="col-lg-4 page-rail">
                <refresh-theme-follow-us-block />

                <marko-web-gam-display-ad
                  id="gpt-ad-rail-infinite"
                  modifiers=["sticky-top", "max-width-300", "margin-auto-x-md"]
                  slots=adSlots({ aliases })
                />
              </aside>
            </div>
          </@section>
        </marko-web-page-wrapper>
      </marko-web-resolve-page>
    </marko-web-page-container>
  </@below-page>
  <@foot>
    <marko-web-resolve-page|{ data: content }| node=pageNode>
      <refresh-theme-fixed-ad-bottom aliases=hierarchyAliases(content.primarySection) />
    </marko-web-resolve-page>
  </@foot>
</marko-web-content-page-layout>
