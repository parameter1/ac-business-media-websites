import { buildImgixUrl } from "@parameter1/base-cms-image";
import { getAsArray, getAsObject, get } from "@parameter1/base-cms-object-path";
import defaultValue from "@parameter1/base-cms-marko-core/utils/default-value";
import getContentPreview from "@parameter1/base-cms-marko-web-theme-monorail/utils/get-content-preview";
import { shouldOverlay, restrictContentByReg, shouldTruncate } from "@parameter1/base-cms-marko-web-theme-monorail/utils/content-meter-helpers";
import contentIframe from "@ac-business-media/package-global/utils/content-iframe";

$ const {
  site,
  contentGatingHandler,
  contentMeterState,
  contentIdxFormState,
  req,
} = out.global;

$ const enableContextualGating = site.get("enableContextualGating") || false;
<!-- update contentIdxFormStateDisplayBase on the req cookies being present -->
<!-- @todo figure out how to do this ahead of time within the content route if possible -->
$ contentIdxFormState.displayForm = !Boolean(get(req, `cookies.${get(contentIdxFormState, 'cookie.name')}`));
$ const { formId: idxFormId, displayForm: displayIdxForm, cookie: idxSuveyCookie } = contentIdxFormState;
$ const showOverlay = shouldOverlay(contentMeterState);

$ const { id, type, pageNode, showReadNextBlock, showBottomAdBlock, showTopStoryBlock, ...rest } = input;
$ const sections = getAsArray(input, "sections");

$ const displayOverlay = (contentMeterState) ? defaultValue(contentMeterState.displayOverlay, false) : false;
$ const withComments = (displayOverlay) ? false : defaultValue(input.withComments, false);

$ const displayPrimaryImage = ["media-gallery"].includes(type) ? false : true;
$ const displayPhotoswipe = ["media-gallery"].includes(type) || req.query.displayPhotoswipe ? true : false;
$ const displayPublishedDate = ["company", "contact", "whitepaper"].includes(type) ? false : true;
$ const displayReadNext = showReadNextBlock && ["article"].includes(type);
$ const displaySocialShare = ["contact"].includes(type) ? false : true;
$ const shouldInjectAds = false; // ["article", "video", "news", "podcast"].includes(type);
$ const displayRecommended = (displayOverlay) ? false : defaultValue(input.displayRecommended, true);

$ const withAds = !showOverlay && !idxFormId;
$ const loadMore = !showOverlay && !idxFormId;

<global-content-wrapper-layout
  id=id
  type=type
  page-node=pageNode
  with-ads=withAds
  load-more=loadMore
  with-feed-ads=false
  ...rest
>
  <@section|{ blockName, content, aliases, authors }| modifiers=["content-header"]>
    $ const { primarySection } = content;
    <div class="content-page-header">
      <theme-content-page-breadcrumbs section=primarySection />
      <marko-web-content-name tag="h1" block-name=blockName obj=content />
      <marko-web-content-teaser tag="p" class="page-wrapper__deck" obj=content />
      <if(type !== "contact")>
        <if(authors.length === 1)>
          <theme-author-published-node author=authors[0] content=content lazyload=false display-updated-date=false />
        </if>
      </if>
      <if(type === "event")>
        <default-theme-page-dates|{ blockName }|>
          <marko-web-content-starts tag="span" block-name=blockName obj=content />
          <if(content.starts !== content.ends)>
            <marko-web-content-ends tag="span" block-name=blockName obj=content />
          </if>
        </default-theme-page-dates>
      </if>
      <else-if(displayPublishedDate && authors.length !== 1)>
        <default-theme-page-dates|{ blockName }|>
          <theme-content-published-node block-name=blockName obj=content display-updated-date=false />
        </default-theme-page-dates>
      </else-if>
      <if(content.company)>
        <div class="page-attribution__content-company-name">
          <marko-web-content-name tag="span" block-name="company" obj=content.company link=true />
        </div>
      </if>
      <global-sponsored-section-logo alias=primarySection.alias modifiers=["content-page"] class="mt-3" />
      <if(content.magazineSchedules.length && site.get("magazine"))>
        <a href="/subscribe" class="btn btn-primary mt-3 magazine-subscribe">Subscribe to Magazine</a>
      </if>
    </div>
  </@section>

  <@section|{ aliases, content, authors }| modifiers=["content-body"]>
    $ const { primarySection } = content;
    <div class="row">
      <div class="col-lg-8">
        <global-content-contact-details obj=content />
        <div class="content-page-body">
          <default-theme-page-contents|{ blockName }| attrs={ "data-gallery-id": id }>
            <if(content.embedCode)>
              $ const iframeContent = contentIframe(content);
              <marko-web-content-embed-code block-name=blockName obj=iframeContent />
            </if>
            <else-if(type === "media-gallery")>
              <!-- <marko-web-image-slider images=images /> -->
            </else-if>
            <else-if(displayPrimaryImage)>
              $ let forceDisplay;
              $ if (type === "contact") forceDisplay = "left";
              $ if (type === "video") forceDisplay = "none";
              <theme-primary-image-block
                obj=content.primaryImage
                force-display=forceDisplay
              />
            </else-if>

            <if(content.transcript)>
              <marko-web-link href=`#transcript-${id}` class="btn btn-transcript mt-block mb-2" title="Transcript">
                <marko-web-icon name="file" modifiers=["lg"] /> Transcript
              </marko-web-link>
            </if>

            $ const requiresRegistration = contentGatingHandler({ content }) || restrictContentByReg(contentMeterState, contentGatingHandler, content);
            $ const accessLevels = getAsArray(content, "userRegistration.accessLevels");
            <marko-web-identity-x-access|context|
              enabled=requiresRegistration
              required-access-level-ids=accessLevels
            >
              <if(enableContextualGating && idxFormId)>
                <if(displayIdxForm)>
                  $ const body = getContentPreview({ body: content.body, selector: "p:lt(3)" });
                  <marko-web-content-body block-name=blockName obj={ body } />
                  <div class="content-page-preview-overlay" />
                  <marko-web-content-body block-name=blockName attrs={ style: "display: none;" } obj=content modifiers=["ld-json"] />
                  <marko-web-identity-x-context|{ hasUser, user, application }|>
                    <if(hasUser)>
                      <marko-web-identity-x-form-access
                        content=content
                        user=user
                        formId=idxFormId
                        application=application
                      />
                    </if>
                    <else>
                      <marko-web-identity-x-non-auth-identify|{ user: identifiedUser }|>
                        <marko-web-identity-x-form-access
                          content=content
                          user=identifiedUser
                          formId=idxFormId
                          application=application
                        />
                      </marko-web-identity-x-non-auth-identify>
                    </else>
                  </marko-web-identity-x-context>
                </if>
                <else>
                  $ const bodyId = `content-body-${content.id}`;
                  <theme-body-with-injection
                    content=content
                    aliases=[]
                    block-name=blockName
                    selector=bodyId
                    preventHTMLInjection=true
                  />
                </else>
              </if>
              <else-if(shouldTruncate(contentMeterState))>
                $ const body = showOverlay ? getContentPreview({ body: content.body, selector: "p:lt(3)" }) : getContentPreview({ body: content.body, selector: "p:nth-of-type(1)" });
                <marko-web-content-body block-name=blockName obj={ body } >
                  <@embed-options lazyloadImages=false/>
                </marko-web-content-body>

                <div class="content-page-preview-overlay" />
                <if(!showOverlay)>
                  <theme-content-page-gate
                    can-access=context.canAccess
                    is-logged-in=context.isLoggedIn
                    has-required-access-level=context.hasRequiredAccessLevel
                    requires-access-level=context.requiresAccessLevel
                    requires-user-input=context.requiresUserInput
                    messages=context.messages
                    user-input-title="Step 2 of 2"
                    profile-call-to-action=""
                    profile-button-label="Create Account"
                    profile-event-name="content_meter_profile"
                  />
                </if>
                <marko-web-content-body block-name=blockName attrs={ style: "display: none;" } obj=content modifiers=["ld-json"] />
              </else-if>
              <else-if(!context.canAccess || context.requiresUserInput)>
                $ const body = getContentPreview({ body: content.body, selector: "p:lt(3)" });
                <marko-web-content-body block-name=blockName obj={ body } />

                <div class="content-page-preview-overlay" />
                <theme-content-page-gate
                  profile-confirmation=false
                  can-access=context.canAccess
                  is-logged-in=context.isLoggedIn
                  has-required-access-level=context.hasRequiredAccessLevel
                  requires-access-level=context.requiresAccessLevel
                  requires-user-input=context.requiresUserInput
                  messages=context.messages
                  content-gate-type="default"
                />
                <marko-web-content-body block-name=blockName attrs={ style: "display: none;" } obj=content modifiers=["ld-json"] />
              </else-if>
              <else>
                $ const bodyId = `content-body-${content.id}`;
                <theme-body-with-injection
                  content=content
                  aliases=aliases
                  block-name=blockName
                  selector=bodyId
                  preventHTMLInjection=!shouldInjectAds
                  // disable leadderboard ad inject to allow for Teads video injection from GTM
                  desktop-leaderboard-ad-counts=[]
                  mobile-leaderboard-ad-counts=[]
                />

                $ const transcriptId = `content-transcript-${content.id}`;

                <!-- Add Transcripts and allow for the ad injection -->
                <if(content.transcript)>
                  $ const transcriptId = `content-transcript-${content.id}`;
                  <div id=`transcript-${id}` class="page-contents__content-transcript">
                    <marko-web-element block-name="page-contents" name="content-transcript-title">
                      <marko-web-icon name="file" modifiers=["lg"] /> Transcript
                    </marko-web-element>
                    <theme-body-with-injection
                      content={ body: content.transcript }
                      aliases=aliases
                      block-name=blockName
                      selector=transcriptId
                      preventHTMLInjection=!shouldInjectAds
                    />
                  </div>
                </if>

                <!-- needs input -->
                <if(input.afterBody)>
                  <${input.afterBody}
                    aliases=aliases
                    block-name=blockName
                    content=content
                  />
                </if>

                $ const sidebars = getAsArray(content, "sidebars").filter((sidebar) => sidebar.name !== "Table of Contents").map((sidebar) => sidebar.body);
                <marko-web-content-sidebars block-name=blockName obj={ sidebars } />
                <if(type === "document" || type === "whitepaper")>
                    <default-theme-content-download obj=content>
                      <@wufoo user-name=site.get("wufoo.userName") />
                      <@link class="btn btn-primary" />
                    </default-theme-content-download>
                </if>
                <if(type !== "contact")>
                  <for|author| of=authors>
                    <if(getAsArray(author, "labels").includes("Contributor"))>
                      <marko-web-content-body obj=author block-name="inline-author-bio" />
                    </if>
                  </for>
                </if>

                <if(displayReadNext)>
                  <theme-read-next-block
                    content-id=id
                    section-id=primarySection.id
                    published=content.published
                  />
                </if>

                <if(displaySocialShare)>
                  <marko-web-social-sharing
                    path=content.siteContext.path
                    providers=["print", "facebook", "linkedin", "twitter"]
                    print-path=`/print/content/${content.id}`
                  />
                </if>

                <div id="credspark-container" />

                <marko-web-identity-x-context|{ hasUser }|>
                  <if(!hasUser)>
                    <identity-x-newsletter-form-inline type="inlineContent" with-image=true />
                  </if>
                </marko-web-identity-x-context>

              </else>
            </marko-web-identity-x-access>

            <if(withComments && !idxFormId)>
              <theme-identity-x-comment-stream content=content />
            </if>

          </default-theme-page-contents>
        </div>
      </div>
      <div class="col-lg-4 page-rail">
        <if(withAds)>
          <div class="mb-block">
            <theme-gam-define-display-ad
              name="rotation-rail"
              position="content_page"
              aliases=aliases
              modifiers=["max-width-300", "center", "margin-auto-x", "rail"]
              class="mb-0"
            />
          </div>
        </if>
        <if(!idxFormId)>
          $ const excludeContentTypes = ["Contact", "Company", "Document", "TextAd", "Promotion"];
          <theme-latest-content-list-block
            title=`Latest in ${primarySection.name}`
            alias=primarySection.alias
            query-params={ excludeContentTypes, excludeContentIds: [content.id] }
            class="mb-block"
          >
            <@native-x indexes=[0,2] name="related-content" aliases=aliases />
          </theme-latest-content-list-block>
        </if>
        <else-if(displayRecommended)>
          <div class="mb-block">
            <global-recommended-content-block query-params={ excludeContentIds: [content.id] } alias=primarySection.alias aliases=aliases />
          </div>
        </else-if>
        <if(withAds)>
          <div class="mb-block sticky-top">
            <theme-gam-define-display-ad
              name="rotation"
              position="content_page"
              aliases=aliases
              modifiers=["max-width-300", "center", "margin-auto-x", "rail"]
              class="mb-0"
            />
          </div>
        </if>

      </div>
    </div>
  </@section>

  <@section|{ aliases, content }|>
    <if(!idxFormId)>
      <theme-related-stories-block
        content-id=content.id
        section-id=content.primarySection.id
        published=content.published
        with-native-x=true
      >
        <@native-x index=3 name="related-content" aliases=aliases />
      </theme-related-stories-block>
    </if>
  </@section>

  <for|s| of=sections>
    <@section|{ blockName, content, aliases }| modifiers=s.modifiers>
      <${s.renderBody}
        block-name=blockName
        content=content
        aliases=aliases
      />
    </@section>
  </for>
</global-content-wrapper-layout>
